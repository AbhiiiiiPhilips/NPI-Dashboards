name: Update Dashboards
run-name: Update ${{ github.event.inputs.project || github.event.client_payload.project }} Dashboards

on:
  workflow_dispatch:
    inputs:
      project:
        description: 'Project to update'
        required: true
        type: choice
        options:
          - 'VM 13.0'
          - 'Blaze 1.0'
          - 'VM 14.0'
  repository_dispatch:
    types:
      - repository_dispatch

jobs:
  capture-dashboards:
    runs-on: ubuntu-latest
    env:
      PROJECT: ${{ github.event.inputs.project || github.event.client_payload.project }}
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          persist-credentials: true

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Restore node_modules cache
        id: node-mod-cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Install Dependencies (cache miss only)
        if: steps.node-mod-cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          echo "Cache miss, installing dependencies..."
          npm ci --omit=dev --prefer-offline --no-audit --no-fund --no-progress --silent

      - name: Skip install (cache hit)
        if: steps.node-mod-cache.outputs.cache-hit == 'true'
        run: echo "Cache hit, skipping installation"

      - name: Validate and normalize project name
        id: validate
        shell: bash
        run: |
          RAW_PROJECT="${PROJECT}"
          echo "üìã Raw project input: '$RAW_PROJECT'"
          
          # Clean quotes, CR, and trim whitespace
          PROJECT_CLEAN=$(printf "%s" "$RAW_PROJECT" | tr -d '"' | tr -d "'" | tr -d '\r' | sed -E 's/^[[:space:]]+|[[:space:]]+$//g')
          echo "project_clean=$PROJECT_CLEAN" >> $GITHUB_OUTPUT
          
          if [[ "$PROJECT_CLEAN" != "VM 13.0" && "$PROJECT_CLEAN" != "Blaze 1.0" && "$PROJECT_CLEAN" != "VM 14.0" ]]; then
            echo "‚ùå Error: Invalid project name: '$PROJECT_CLEAN'"
            exit 1
          fi
          echo "‚úÖ Valid project name: $PROJECT_CLEAN"

      - name: Create output directory
        env:
          PROJECT: ${{ steps.validate.outputs.project_clean }}
        run: |
          MONTH=$(date -u +%Y-%m)
          mkdir -p "snapshots/$MONTH/$PROJECT"

      - name: Capture Screenshots
        shell: bash
        env:
          PROJECT: ${{ steps.validate.outputs.project_clean }}
        run: |
          echo "Running snapshots for project: $PROJECT"
          node snapshots.js "$PROJECT"

      - name: Pull before commit
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git pull origin main --no-rebase

      - name: Commit and push with retry
        env:
          PROJECT: ${{ steps.validate.outputs.project_clean }}
        run: |
          set -euo pipefail
          MONTH=$(date -u +%Y-%m)
          
          # Stage and commit changes
          git add "snapshots/$MONTH/${PROJECT}"
          git commit -m "Update ${PROJECT} screenshots [skip ci]" --allow-empty
          
          # Push with retries
          for i in {1..3}; do
            echo "Push attempt $i/3..."
            
            # Pull latest changes
            git pull origin main
            
            if git push origin main; then
              echo "‚úÖ Push successful"
              exit 0
            fi
            
            if [ $i -lt 3 ]; then
              echo "Push failed, retrying in 3s..."
              sleep 3
            fi
          done
          
          echo "‚ùå Failed to push after 3 attempts"
          exit 1
