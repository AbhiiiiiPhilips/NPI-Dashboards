name: Update Dashboards
run-name: Update ${{ github.event.inputs.project || github.event.client_payload.project }} Dashboards

on:
  workflow_dispatch:
    inputs:
      project:
        description: 'Project to update'
        required: true
        type: choice
        options:
          - 'VM 13.0'
          - 'Blaze 1.0'
          - 'VM 14.0'
  repository_dispatch:
    types:
      - repository_dispatch

jobs:
  capture-dashboards:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Dependencies
        run: npm install

      - name: Capture Screenshots
        shell: bash
        run: |
          # Get project name from input or client payload
          RAW_PROJECT="${{ github.event.inputs.project || github.event.client_payload.project }}"
          echo "üìã Raw project input: '$RAW_PROJECT'"

          # Clean quotes, CR, and trim whitespace
          PROJECT_CLEAN=$(printf "%s" "$RAW_PROJECT" | tr -d '"' | tr -d "'" | tr -d '\r' | sed -E 's/^[[:space:]]+|[[:space:]]+$//g')
          LCASE=$(printf "%s" "$PROJECT_CLEAN" | tr '[:upper:]' '[:lower:]')

          # Only accept exact canonical project names; allow trimming of surrounding quotes/CR and whitespace
          PROJECT="$PROJECT_CLEAN"

          echo "\ud83d\udd0d Normalized (trimmed) project name: '$PROJECT'"

          # Validate canonical project name (exact, case-sensitive)
          if [[ "$PROJECT" != "VM 13.0" && "$PROJECT" != "Blaze 1.0" && "$PROJECT" != "VM 14.0" ]]; then
            echo "\u274c Error: Invalid project name: '$PROJECT'"
            echo "Must be one of: 'VM 13.0', 'Blaze 1.0', 'VM 14.0' (exact, case-sensitive)"
            exit 1
          fi

          echo "\u2705 Valid canonical project name detected"
          echo "Running snapshots for project: $PROJECT"
          node snapshots.js "$PROJECT"

      - name: Commit Changes
        shell: bash
        run: |
          set -euo pipefail
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

          echo "üìÅ Contents of snapshots directory before commit:"
          if [ -d snapshots ]; then
            ls -R snapshots/ || true
          else
            echo "No snapshots directory found"
          fi

          # Add any changes under snapshots/ (force in case files are gitignored)
          git add -A snapshots/ || true

          # If there are no staged changes, write a small marker file so we can record the run
          if git diff --cached --quiet; then
            MARKER="snapshots/last-run-$(echo "$PROJECT" | tr ' /' '__').txt"
            echo "Run: $(date -u +%Y-%m-%dT%H:%M:%SZ) Project: $PROJECT" > "$MARKER"
            git add "$MARKER"
          fi

          # Now commit if there are staged changes
          if git diff --cached --quiet; then
            echo "‚ÑπÔ∏è Still no changes to commit after marker creation"
            exit 0
          else
            git commit -m "Update ${{ github.event.inputs.project || github.event.client_payload.project }} screenshots [skip ci]"
            git push
            echo "‚úÖ Changes committed and pushed successfully"
          fi
