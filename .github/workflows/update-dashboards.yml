name: Update Dashboards
run-name: Update ${{ github.event.inputs.project || github.event.client_payload.project }} Dashboards

on:
  workflow_dispatch:
    inputs:
      project:
        description: 'Project to update'
        required: true
        type: choice
        options:
          - 'VM 13.0'
          - 'Blaze 1.0'
          - 'VM 14.0'
  repository_dispatch:
    types:
      - repository_dispatch

jobs:
  capture-dashboards:
    runs-on: ubuntu-latest
    env:
      PROJECT: ${{ github.event.inputs.project || github.event.client_payload.project }}
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Restore node_modules cache
        id: node-mod-cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Install Dependencies (cache miss only)
        if: steps.node-mod-cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          set -euo pipefail
          echo "Cache miss, installing dependencies..."
          npm ci --omit=dev --prefer-offline --no-audit --no-fund --no-progress --silent

      - name: Skip install (cache hit)
        if: steps.node-mod-cache.outputs.cache-hit == 'true'
        run: echo "Cache hit, skipping installation"

      - name: Capture Screenshots
        shell: bash
        run: |
          # Get project name from input or client payload
          RAW_PROJECT="${{ github.event.inputs.project || github.event.client_payload.project }}"
          echo "ðŸ“‹ Raw project input: '$RAW_PROJECT'"

          # Clean quotes, CR, and trim whitespace
          PROJECT_CLEAN=$(printf "%s" "$RAW_PROJECT" | tr -d '"' | tr -d "'" | tr -d '\r' | sed -E 's/^[[:space:]]+|[[:space:]]+$//g')

          # Only accept exact canonical project names; allow trimming of surrounding quotes/CR and whitespace
          PROJECT="$PROJECT_CLEAN"

          echo "\ud83d\udd0d Normalized (trimmed) project name: '$PROJECT'"

          # Validate canonical project name (exact, case-sensitive)
          if [[ "$PROJECT" != "VM 13.0" && "$PROJECT" != "Blaze 1.0" && "$PROJECT" != "VM 14.0" ]]; then
            echo "\u274c Error: Invalid project name: '$PROJECT'"
            echo "Must be one of: 'VM 13.0', 'Blaze 1.0', 'VM 14.0' (exact, case-sensitive)"
            exit 1
          fi

          echo "\u2705 Valid canonical project name detected"
          echo "Running snapshots for project: $PROJECT"
          node snapshots.js "$PROJECT"

      - name: Commit Changes
        shell: bash
        env:
          PROJECT: ${{ env.PROJECT }}
        run: |
          set -euo pipefail
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

          MONTH=$(date -u +%Y-%m)
          git add "snapshots/$MONTH/${PROJECT}"
          # commit if there are changes; allow-empty keeps old behaviour but ignore error if nothing to commit
          git commit -m "Update ${PROJECT} screenshots [skip ci]" --allow-empty || true

          # Ensure we have latest remote refs and rebase local branch to avoid push rejections when remote advanced
          git fetch origin main
          # Try to rebase local commits on top of remote main; if rebase fails, fall back to merge to avoid blocking
          if git rev-parse --verify HEAD >/dev/null 2>&1; then
            if ! git rebase origin/main; then
              echo "Rebase failed, falling back to merge";
              git rebase --abort || true;
              git pull --no-rebase --no-edit || true;
            fi
          fi

          # Push; if a fast-forward rejection happens, try safe force-with-lease to avoid losing concurrent commits
          if ! git push; then
            echo "Push rejected, attempting push --force-with-lease";
            git push --force-with-lease
          fi
